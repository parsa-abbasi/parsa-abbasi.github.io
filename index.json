[{"authors":null,"categories":null,"content":"Parsa Abbasi is a graduate student in Artificial Intelligence at Iran University of Science and Technology, where he is conducting research focused on improving graph neural networks for relational graphs. His research seeks to improve upon existing architectures like R-GAT by proposing and developing a model with fewer training parameters that addresses static attention issues.\nParsa received his BSc in Computer Engineering from the University of Guilan, where he explored areas such as natural language processing and deep learning. During his undergraduate studies, Parsa co-authored a research paper on designing sentiment analysis models using deep learning architectures for low-resource Persian language.\nDriven by his passion for the field, Parsa seeks to pursue a PhD in AI to continue his research and further advance the field.\n","date":-62135596800,"expirydate":-62135596800,"kind":"term","lang":"en","lastmod":-62135596800,"objectID":"15a3404cbbc999059255baca3346a34d","permalink":"","publishdate":"0001-01-01T00:00:00Z","relpermalink":"","section":"authors","summary":"Parsa Abbasi is a graduate student in Artificial Intelligence at Iran University of Science and Technology, where he is conducting research focused on improving graph neural networks for relational graphs. His research seeks to improve upon existing architectures like R-GAT by proposing and developing a model with fewer training parameters that addresses static attention issues.","tags":null,"title":"Parsa Abbasi","type":"authors"},{"authors":[],"categories":null,"content":" Click on the Slides button above to view the built-in slides feature. Slides can be added in a few ways:\nCreate slides using Wowchemy’s Slides feature and link using slides parameter in the front matter of the talk file Upload an existing slide deck to static/ and link using url_slides parameter in the front matter of the talk file Embed your slides (e.g. Google Slides) or presentation video on this page using shortcodes. Further event details, including page elements such as image galleries, can be added to the body of this page.\n","date":1680775200,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1680775200,"objectID":"c48b987707a4bd87680cce5d375f9645","permalink":"https://parsa-abbasi.github.io/talk/python-tools-for-data-analysis/","publishdate":"2023-03-01T00:00:00Z","relpermalink":"/talk/python-tools-for-data-analysis/","section":"event","summary":"An example talk using Wowchemy's Markdown slides feature.","tags":["Data Analysis","NumPy","Pandas","Matplotlib","Seaborn","Plotly","Web Scraping","BeautifulSoup","Scrapy","Selenium"],"title":"Python tools for Data Analysis","type":"event"},{"authors":null,"categories":null,"content":"Signature verification has practical applications in various fields, particularly for security, legal, and financial purposes. Deep learning (DL) models have been proved to be promising in recognizing handwritten signatures, with high accuracy. In this expriment, we investigate the use of the InceptionV3, a pre-trained convolutional neural network (CNN), for signature classification.\nNote: This project was done as part of the Pattern Recognition course at the Iran University of Science and Technology in the Fall of 2020.\nDataset The dataset used for this project is called UTSig, which consists of 115 classes, each belonging to one authentic person. There are 27 genuine signatures per class, 3 opposite-hand signed samples, and 42 simple forgeries. The dataset can be downloaded from here.\nA sample of the UTSig dataset. To start the implementation, the dataset is downloaded and stored in the Google Drive. The genuine signatures were divided into 22 training images and 5 test images for each person and placed in the appropriate subdirectorie.\n!unzip \u0026#39;/content/drive/MyDrive/UTSig.zip\u0026#39; dataset_path = \u0026#39;/content/UTSig_Crop/\u0026#39; # Number of genuine signatures per class (person) G_num = 27 # Number of forgeries signatures per class (person) F_num = 45 # Number of classes (persons) c_num = 115 os.mkdir(dataset_path + \u0026#39;genuine\u0026#39;) os.mkdir(dataset_path + \u0026#39;genuine/train\u0026#39;) os.mkdir(dataset_path + \u0026#39;genuine/test\u0026#39;) dataset_gen_path = dataset_path + \u0026#39;genuine/\u0026#39; Organizing the Dataset We organized the images into the appropriate format for the ImageDataGenerator. We created subdirectories for each class in the genuine directory, with 22 images for training and 5 images for testing per class.\ngenuine train class_0 0_image_0.png 0_image_1.png … 0_image_21.png class_1 … class_114 test class_0 0_image_22.png 0_image_23.png … 0_image_26.png class_1 … class_114 for c in trange(c_num): class_id = c + 1 class_id_str = str(class_id).zfill(len(str(c_num))) # Make a subdirectory for this class train_subdirectory = dataset_gen_path + \u0026#39;/train/class_\u0026#39; + str(c) os.mkdir(train_subdirectory) test_subdirectory = dataset_gen_path + \u0026#39;/test/class_\u0026#39; + str(c) os.mkdir(test_subdirectory) # For each genuine for g in range(G_num): genuine_id = g + 1 genuine_id_str = str(genuine_id).zfill(len(str(G_num))) file_name = \u0026#39;C\u0026#39; + class_id_str + \u0026#39;G\u0026#39; + genuine_id_str + \u0026#39;.PNG\u0026#39; file_path = dataset_path + file_name if g \u0026lt; 22: dest_path = train_subdirectory + \u0026#39;/\u0026#39; + str(c) + \u0026#39;_image_\u0026#39; + str(g) + \u0026#39;.png\u0026#39; os.replace(file_path, dest_path) else: dest_path = test_subdirectory + \u0026#39;/\u0026#39; + str(c) + \u0026#39;_image_\u0026#39; + str(g) + \u0026#39;.png\u0026#39; os.replace(file_path, dest_path) Preprocessing We used the Image Data Generator from Keras to preprocess our images. We also applied various augmentation techniques such as rotation, zooming, shifting, and flipping to generate more data and reduce overfitting.\nsrc_path_train = dataset_gen_path + \u0026#39;/train/\u0026#39; src_path_test = dataset_gen_path + \u0026#39;/test/\u0026#39; train_datagen = ImageDataGenerator( rescale = 1 / 255.0, rotation_range= 20, zoom_range = 0.05, width_shift_range = 0.05, height_shift_range = 0.05, shear_range = 0.05, horizontal_flip = True, fill_mode = \u0026#34;nearest\u0026#34;, validation_split = 0.20) test_datagen = ImageDataGenerator(rescale = 1 / 255.0) batch_size = 16 target_size = (299, 299) train_generator = train_datagen.flow_from_directory( directory = src_path_train, target_size = target_size, color_mode = \u0026#34;rgb\u0026#34;, batch_size = batch_size, class_mode = \u0026#34;categorical\u0026#34;, subset = \u0026#39;training\u0026#39;, shuffle = True ) valid_generator = train_datagen.flow_from_directory( directory = src_path_train, target_size = target_size, color_mode = \u0026#34;rgb\u0026#34;, batch_size = batch_size, class_mode = \u0026#34;categorical\u0026#34;, subset = \u0026#39;validation\u0026#39;, shuffle = True ) test_generator = test_datagen.flow_from_directory( directory = src_path_test, target_size = target_size, color_mode = \u0026#34;rgb\u0026#34;, batch_size = 1, class_mode = None, shuffle = False ) test_true_labels = test_generator.classes Model The propsed model based on InceptionV3 To classify the signatures, we used the InceptionV3 model, which is pre-trained on the ImageNet database to classify images into 1000 object categories. We modified the model by removing the fully-connected layer at the top, setting all layers to be non-trainable, and adding a 2D Global Average Pooling to transform the feature embedding into a single 2048 size vector. We then added a fully connected layer with 1024 neurons, a Dropout layer, and a softmax layer to calculate the score for each of the classes.\n# Loading Inception-V3 model model = InceptionV3(include_top=False, weights=\u0026#39;imagenet\u0026#39;, input_shape=(299, 299, 3)) # Freeze layers for layer in model.layers: layer.trainable = False # Add our classifier to the end of the model flat1 = GlobalAveragePooling2D()(model.layers[-1].output) class1 = Dense(1024, activation=\u0026#39;relu\u0026#39;)(flat1) dropout1 = Dropout(0.1)(class1) output = Dense(c_num, activation=\u0026#39;softmax\u0026#39;)(dropout1) model = Model(inputs=model.inputs, outputs=output) model.summary() Training and …","date":1677096900,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1677096900,"objectID":"91caf2294239b88c2b777d4b9e271b68","permalink":"https://parsa-abbasi.github.io/project/signature-verification-with-cnn/","publishdate":"2023-02-22T20:15:00Z","relpermalink":"/project/signature-verification-with-cnn/","section":"project","summary":"This project explores the implementation of the InceptionV3 model for signature classification in the UTSig dataset.","tags":["Deep Learning","Convolutional Neural Networks","CNN","InceptionV3","Keras"],"title":"Offline Signature Verification with Convolutional Neural Networks (CNNs)","type":"project"},{"authors":["Javad PourMostafa Roshan Sharami","Parsa Abbasi Sarabestani","Seyed Abolghasem Mirroshandel"],"categories":null,"content":"","date":1586563200,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1586563200,"objectID":"e5ffdae38699b8502e5850f7574e52dc","permalink":"https://parsa-abbasi.github.io/publication/deepsentipers/","publishdate":"2020-04-11T00:00:00Z","relpermalink":"/publication/deepsentipers/","section":"publication","summary":"This paper focuses on how to extract opinions over each Persian sentence-level text. Deep learning models provided a new way to boost the quality of the output. However, these architectures need to feed on big annotated data as well as an accurate design. To best of our knowledge, we do not merely suffer from lack of well-annotated Persian sentiment corpus, but also a novel model to classify the Persian opinions in terms of both multiple and binary classification. So in this work, first we propose two novel deep learning architectures comprises of bidirectional LSTM and CNN. They are a part of a deep hierarchy designed precisely and also able to classify sentences in both cases. Second, we suggested three data augmentation techniques for the low-resources Persian sentiment corpus. Our comprehensive experiments on three baselines and two different neural word embedding methods show that our data augmentation methods and intended models successfully address the aims of the research.","tags":["Text Mining","Sentiment Analysis","Deep Learning","Machine Learning","Natural Language Processing","Opinion Mining"],"title":"DeepSentiPers: Novel Deep Learning Models Trained Over Proposed Augmented Persian Sentiment Corpus","type":"publication"},{"authors":["Javad PourMostafa Roshan Sharami","Parsa Abbasi Sarabestani","Seyed Abolghasem Mirroshandel"],"categories":null,"content":"","date":1574380800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1574380800,"objectID":"0a9c99fd11fae90b52056b0641cc4624","permalink":"https://parsa-abbasi.github.io/publication/sentiment-fa/","publishdate":"2019-11-22T00:00:00Z","relpermalink":"/publication/sentiment-fa/","section":"publication","summary":"In this article, due to the importance of sentiment analysis, it has been strived to design a framework that is capable to distinguish the polarity of the opinions in the Persian language. For reaching out the goals of the article, a Persian corpus is used and three baseline models such as Support vector machine, Naive Bayes and Stochastic gradient descend have been selected in order to classify the sentence-level of a dataset. Then common deep learning models that are suitable for text mining like long short-term memory and convolutional neural network applied on embedded vectors. Through this paper, some methods based on data augmentation, word embedding, and word representation have been used also. Consequently, it will be shown that the proposed deep learning models work with high accuracy in comparison with the baseline algorithms.","tags":["Text Mining","Sentiment Analysis","Deep Learning","Machine Learning","Natural Language Processing","Opinion Mining"],"title":"Presenting A Sentiment Analysis System Using Deep Learning Models On Persian Texts (In Persian)","type":"publication"},{"authors":[],"categories":[],"content":"Create slides in Markdown with Wowchemy Wowchemy | Documentation\nFeatures Efficiently write slides in Markdown 3-in-1: Create, Present, and Publish your slides Supports speaker notes Mobile friendly slides Controls Next: Right Arrow or Space Previous: Left Arrow Start: Home Finish: End Overview: Esc Speaker notes: S Fullscreen: F Zoom: Alt + Click PDF Export Code Highlighting Inline code: variable\nCode block:\nporridge = \u0026#34;blueberry\u0026#34; if porridge == \u0026#34;blueberry\u0026#34;: print(\u0026#34;Eating...\u0026#34;) Math In-line math: $x + y = z$\nBlock math:\n$$ f\\left( x \\right) = ;\\frac{{2\\left( {x + 4} \\right)\\left( {x - 4} \\right)}}{{\\left( {x + 4} \\right)\\left( {x + 1} \\right)}} $$\nFragments Make content appear incrementally\n{{% fragment %}} One {{% /fragment %}} {{% fragment %}} **Two** {{% /fragment %}} {{% fragment %}} Three {{% /fragment %}} Press Space to play!\nOne Two Three A fragment can accept two optional parameters:\nclass: use a custom style (requires definition in custom CSS) weight: sets the order in which a fragment appears Speaker Notes Add speaker notes to your presentation\n{{% speaker_note %}} - Only the speaker can read these notes - Press `S` key to view {{% /speaker_note %}} Press the S key to view the speaker notes!\nOnly the speaker can read these notes Press S key to view Themes black: Black background, white text, blue links (default) white: White background, black text, blue links league: Gray background, white text, blue links beige: Beige background, dark text, brown links sky: Blue background, thin dark text, blue links night: Black background, thick white text, orange links serif: Cappuccino background, gray text, brown links simple: White background, black text, blue links solarized: Cream-colored background, dark green text, blue links Custom Slide Customize the slide style and background\n{{\u0026lt; slide background-image=\u0026#34;/media/boards.jpg\u0026#34; \u0026gt;}} {{\u0026lt; slide background-color=\u0026#34;#0000FF\u0026#34; \u0026gt;}} {{\u0026lt; slide class=\u0026#34;my-style\u0026#34; \u0026gt;}} Custom CSS Example Let’s make headers navy colored.\nCreate assets/css/reveal_custom.css with:\n.reveal section h1, .reveal section h2, .reveal section h3 { color: navy; } Questions? Ask\nDocumentation\n","date":1549324800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1549324800,"objectID":"0e6de1a61aa83269ff13324f3167c1a9","permalink":"https://parsa-abbasi.github.io/slides/example/","publishdate":"2019-02-05T00:00:00Z","relpermalink":"/slides/example/","section":"slides","summary":"An introduction to using Wowchemy's Slides feature.","tags":[],"title":"Slides","type":"slides"},{"authors":[],"categories":[],"content":"NumPy Wowchemy | Documentation\nFeatures Efficiently write slides in Markdown 3-in-1: Create, Present, and Publish your slides Supports speaker notes Mobile friendly slides Controls Next: Right Arrow or Space Previous: Left Arrow Start: Home Finish: End Overview: Esc Speaker notes: S Fullscreen: F Zoom: Alt + Click PDF Export Code Highlighting Inline code: variable\nCode block:\nporridge = \u0026#34;blueberry\u0026#34; if porridge == \u0026#34;blueberry\u0026#34;: print(\u0026#34;Eating...\u0026#34;) Math In-line math: $x + y = z$\nBlock math:\n$$ f\\left( x \\right) = ;\\frac{{2\\left( {x + 4} \\right)\\left( {x - 4} \\right)}}{{\\left( {x + 4} \\right)\\left( {x + 1} \\right)}} $$\nFragments Make content appear incrementally\n{{% fragment %}} One {{% /fragment %}} {{% fragment %}} **Two** {{% /fragment %}} {{% fragment %}} Three {{% /fragment %}} Press Space to play!\nOne Two Three A fragment can accept two optional parameters:\nclass: use a custom style (requires definition in custom CSS) weight: sets the order in which a fragment appears Speaker Notes Add speaker notes to your presentation\n{{% speaker_note %}} - Only the speaker can read these notes - Press `S` key to view {{% /speaker_note %}} Press the S key to view the speaker notes!\nOnly the speaker can read these notes Press S key to view Themes black: Black background, white text, blue links (default) white: White background, black text, blue links league: Gray background, white text, blue links beige: Beige background, dark text, brown links sky: Blue background, thin dark text, blue links night: Black background, thick white text, orange links serif: Cappuccino background, gray text, brown links simple: White background, black text, blue links solarized: Cream-colored background, dark green text, blue links Custom Slide Customize the slide style and background\n{{\u0026lt; slide background-image=\u0026#34;/media/boards.jpg\u0026#34; \u0026gt;}} {{\u0026lt; slide background-color=\u0026#34;#0000FF\u0026#34; \u0026gt;}} {{\u0026lt; slide class=\u0026#34;my-style\u0026#34; \u0026gt;}} Custom CSS Example Let’s make headers navy colored.\nCreate assets/css/reveal_custom.css with:\n.reveal section h1, .reveal section h2, .reveal section h3 { color: navy; } Questions? Ask\nDocumentation\n","date":1549324800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1549324800,"objectID":"da492a9346c707ed1d01ed9dc53fc9f8","permalink":"https://parsa-abbasi.github.io/slides/numpy/","publishdate":"2019-02-05T00:00:00Z","relpermalink":"/slides/numpy/","section":"slides","summary":"An introduction to using Wowchemy's Slides feature.","tags":[],"title":"Slides","type":"slides"}]