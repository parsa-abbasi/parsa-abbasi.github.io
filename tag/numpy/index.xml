<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>NumPy | Parsa Abbasi</title><link>https://parsa-abbasi.github.io/tag/numpy/</link><atom:link href="https://parsa-abbasi.github.io/tag/numpy/index.xml" rel="self" type="application/rss+xml"/><description>NumPy</description><generator>Wowchemy (https://wowchemy.com)</generator><language>en-us</language><lastBuildDate>Thu, 06 Apr 2023 10:00:00 +0000</lastBuildDate><image><url>https://parsa-abbasi.github.io/media/icon_hu14e12911534d82dc6e859b10a3857b5a_3074_512x512_fill_lanczos_center_3.png</url><title>NumPy</title><link>https://parsa-abbasi.github.io/tag/numpy/</link></image><item><title>Data Preparation and Visualization in Python</title><link>https://parsa-abbasi.github.io/talk/data-preparation-and-visualization-in-python/</link><pubDate>Thu, 06 Apr 2023 10:00:00 +0000</pubDate><guid>https://parsa-abbasi.github.io/talk/data-preparation-and-visualization-in-python/</guid><description>&lt;h2 id="data-preparation">Data Preparation&lt;/h2>
&lt;p>Data preparation is a critical step in the data analysis process, involving the transformation of raw data into a format that can be analyzed by data scientists or machine learning algorithms. The primary steps involved in data preparation include:&lt;/p>
&lt;ul>
&lt;li>Data Cleaning&lt;/li>
&lt;li>Data Integration&lt;/li>
&lt;li>Data Transformation&lt;/li>
&lt;li>Data Reduction&lt;/li>
&lt;li>Data Discretization&lt;/li>
&lt;/ul>
&lt;p>However, it&amp;rsquo;s important to note that the specific steps and order in which they are performed may differ depending on the data set and analysis goals.&lt;/p>
&lt;p>Data preparation is a big part of the whole Data Science process. According to CrowdFlower report in 2016, it is seen that out of 80 data scientist, they will spend their day in the following:
&lt;figure id="figure-crowdflower">
&lt;div class="d-flex justify-content-center">
&lt;div class="w-100" >&lt;img alt="" srcset="
/talk/data-preparation-and-visualization-in-python/CrowdFlower_DataScienceReport_2016_huf72dac0a1008436f89eb90504e70fc4f_87911_4840482f73744132fce3354f42b5eff8.webp 400w,
/talk/data-preparation-and-visualization-in-python/CrowdFlower_DataScienceReport_2016_huf72dac0a1008436f89eb90504e70fc4f_87911_92148ea2ebd58ec082f357597045687f.webp 760w,
/talk/data-preparation-and-visualization-in-python/CrowdFlower_DataScienceReport_2016_huf72dac0a1008436f89eb90504e70fc4f_87911_1200x1200_fit_q75_h2_lanczos.webp 1200w"
src="https://parsa-abbasi.github.io/talk/data-preparation-and-visualization-in-python/CrowdFlower_DataScienceReport_2016_huf72dac0a1008436f89eb90504e70fc4f_87911_4840482f73744132fce3354f42b5eff8.webp"
width="760"
height="281"
loading="lazy" data-zoomable />&lt;/div>
&lt;/div>&lt;/figure>&lt;/p>
&lt;p>Let&amp;rsquo;s take the example of music streaming platform, &lt;a href="https://soundcloud.com/" target="_blank" rel="noopener">SoundCloud&lt;/a>, and explore how each of these steps could be applied to their data.&lt;/p>
&lt;h3 id="data-cleaning">Data Cleaning&lt;/h3>
&lt;p>SoundCloud has access to vast amounts of data from its users, but this data can contain duplicate, corrupt, inaccurate, or irrelevant information. The platform must handle such data to ensure accuracy and avoid analytical errors. Some challenges that SoundCloud might face during data cleaning are:&lt;/p>
&lt;ul>
&lt;li>
&lt;p>&lt;strong>Incomplete or inconsistent user information:&lt;/strong> SoundCloud may have difficulty analyzing its users&amp;rsquo; music preferences if there is missing or inaccurate account information, such as age, gender, or location. For example, if SoundCloud wants to analyze the most popular songs among its young users in the United States, incomplete or inconsistent user information could lead to inaccurate results.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>Songs with incomplete metadata:&lt;/strong> : Sound metadata includes information like artist name, album, release date, etc. Any inconsistencies or inaccuracies in metadata can affect various analysis tasks, like analyzing top albums or artists. For example, if a song is mislabeled with an incorrect artist name, it could lead to inaccurate analysis of an artist&amp;rsquo;s popularity.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>Inconsistent Artist Names:&lt;/strong> There may be different variations of artists&amp;rsquo; names on SoundCloud, like incorrectly spelled names, abbreviated names, or stage names that can lead to inconsistent track listings. Inconsistent artist names can lead to misrepresentation of an artist&amp;rsquo;s most popular tracks or top plays. For example, using different spellings of an artist name like &amp;ldquo;Nick Cave&amp;rdquo; as &amp;ldquo;Nic Cave&amp;rdquo; or &amp;ldquo;Nicholas Edward Cave&amp;rdquo; will make the total number of plays for each track under her name dispersed inaccurately.&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h3 id="data-integration">Data Integration&lt;/h3>
&lt;p>SoundCloud may have data from multiple sources such as user profiles, song playlists, album data, and song metadata. All these data sources can be integrated to create a comprehensive dataset. This data integration can help in exploring correlations between songs, user preferences, and identifying popular artists, genres, and playlists.&lt;/p>
&lt;h3 id="data-transformation">Data Transformation&lt;/h3>
&lt;p>The data needs to be transformed into a usable format for analysis. For example, SoundCloud may group users by location, age, or behavior to create new variables or features. They may also perform feature engineering to create new variables. For example, SoundCloud might transform user data into a score indicating how active and engaged each user is on the platform, based on metrics such as likes, comments, and track reposts.&lt;br>
This step might also include &lt;strong>Normalization&lt;/strong>, which scales data to a specific range to eliminate the effects of the scale of the feature on the analysis.&lt;/p>
&lt;h3 id="data-reduction">Data Reduction&lt;/h3>
&lt;p>Organizations may choose to focus on a subset of the data for analysis, such as popular songs or active users. For example, SoundCloud may only consider songs with more than 1,000 plays, or users who have listened to more than 10 songs in the past week.&lt;/p>
&lt;h3 id="data-discretization">Data Discretization&lt;/h3>
&lt;p>Continuous data may be discretized to create categories or groups for analysis. For example, Soundcloud may group users by age ranges (e.g. &lt;code>18-24&lt;/code>, &lt;code>25-34&lt;/code>, etc.) or create a new variable to indicate the popularity of a song (e.g. &lt;code>unpopular&lt;/code>, &lt;code>popular&lt;/code>, &lt;code>very popular&lt;/code>).&lt;/p>
&lt;h3 id="numpy-and-pandas">NumPy and Pandas&lt;/h3>
&lt;p>So now that we have a better understanding of the data preparation process, let&amp;rsquo;s learn how to process data efficiently using the &lt;code>numpy&lt;/code> and &lt;code>pandas&lt;/code> libraries.
Now let&amp;rsquo;s learn everything we need to know about these two libraries!
&lt;figure id="figure-preparation">
&lt;div class="d-flex justify-content-center">
&lt;div class="w-100" >&lt;img alt="" srcset="
/talk/data-preparation-and-visualization-in-python/numpy_pandas_hu8dae93dcaeb63fa4afe29a913bfcdf00_28578_483c3d90657e669bd86e9ada29928c61.webp 400w,
/talk/data-preparation-and-visualization-in-python/numpy_pandas_hu8dae93dcaeb63fa4afe29a913bfcdf00_28578_c69d912eae93061e0d60e10ed4e20f99.webp 760w,
/talk/data-preparation-and-visualization-in-python/numpy_pandas_hu8dae93dcaeb63fa4afe29a913bfcdf00_28578_1200x1200_fit_q75_h2_lanczos_3.webp 1200w"
src="https://parsa-abbasi.github.io/talk/data-preparation-and-visualization-in-python/numpy_pandas_hu8dae93dcaeb63fa4afe29a913bfcdf00_28578_483c3d90657e669bd86e9ada29928c61.webp"
width="760"
height="200"
loading="lazy" data-zoomable />&lt;/div>
&lt;/div>&lt;/figure>&lt;/p>
&lt;ul>
&lt;li>&lt;strong>Slide 1:&lt;/strong> &lt;a href="https://parsa-abbasi.github.io/slides/numpy/">Introduction to NumPy&lt;/a>&lt;/li>
&lt;li>&lt;strong>Slide 2:&lt;/strong> &lt;a href="https://parsa-abbasi.github.io/slides/pandas/">Introduction to Pandas&lt;/a>&lt;/li>
&lt;/ul>
&lt;h2 id="data-visualization">Data Visualization&lt;/h2>
&lt;p>Data visualization is the process of creating graphical representations of data to communicate information effectively. It is an essential tool for data analysts as it enables them to explore and analyze large datasets quickly and easily, providing insights that may not be immediately apparent from a table of numbers.&lt;/p>
&lt;p>The need for data visualization arises because humans are visual creatures and we process information more efficiently when it is presented in a visual format. A well-designed graph or chart can tell a story, highlight trends and patterns, and reveal relationships in the data that might be missed when analyzing raw data.&lt;/p>
&lt;h3 id="matplotlib-seaborn-and-plotly">Matplotlib, Seaborn, and Plotly&lt;/h3>
&lt;p>Now that we understand the importance of data visualization let&amp;rsquo;s dive into the world of Python visualization libraries such as &lt;code>matplotlib&lt;/code>, &lt;code>seaborn&lt;/code>, and &lt;code>plotly&lt;/code>, and explore the unique features of each library.
&lt;figure id="figure-visualization">
&lt;div class="d-flex justify-content-center">
&lt;div class="w-100" >&lt;img alt="" srcset="
/talk/data-preparation-and-visualization-in-python/matplotlib_seaborn_plotly_hu40ad9399efa140ea94e0430633dabafd_129652_8daab03600b16d0afbd495d7704f43d2.webp 400w,
/talk/data-preparation-and-visualization-in-python/matplotlib_seaborn_plotly_hu40ad9399efa140ea94e0430633dabafd_129652_f75bef7619e5909932082209ec8d4f47.webp 760w,
/talk/data-preparation-and-visualization-in-python/matplotlib_seaborn_plotly_hu40ad9399efa140ea94e0430633dabafd_129652_1200x1200_fit_q75_h2_lanczos_3.webp 1200w"
src="https://parsa-abbasi.github.io/talk/data-preparation-and-visualization-in-python/matplotlib_seaborn_plotly_hu40ad9399efa140ea94e0430633dabafd_129652_8daab03600b16d0afbd495d7704f43d2.webp"
width="760"
height="200"
loading="lazy" data-zoomable />&lt;/div>
&lt;/div>&lt;/figure>&lt;/p>
&lt;ul>
&lt;li>&lt;strong>Slide 3:&lt;/strong> &lt;a href="https://parsa-abbasi.github.io/slides/matplotlib/">Introduction to Matplotlib&lt;/a>&lt;/li>
&lt;li>&lt;strong>Slide 4:&lt;/strong> &lt;a href="https://parsa-abbasi.github.io/slides/seaborn/">Introduction to Seaborn&lt;/a>&lt;/li>
&lt;li>&lt;strong>Slide 5:&lt;/strong> &lt;a href="https://parsa-abbasi.github.io/slides/plotly/">Introduction to Plotly&lt;/a>&lt;/li>
&lt;/ul>
&lt;h2 id="sources-and-useful-links">Sources and Useful Links&lt;/h2>
&lt;h4 id="-books">📖 Books&lt;/h4>
&lt;ul>
&lt;li>&lt;em>&amp;ldquo;Python Data Science: The Ultimate Guide on What You Need to Know to Work with Data Using Python&amp;rdquo;&lt;/em>, by Oliver Soranson&lt;/li>
&lt;/ul>
&lt;h4 id="-videos">🎞️ Videos&lt;/h4>
&lt;ul>
&lt;li>&lt;a href="https://youtu.be/W1dzfYW4-KQ" target="_blank" rel="noopener">&lt;em>&amp;ldquo;Data Analytics With Python&amp;rdquo;&lt;/em>&lt;/a> by &lt;a href="https://www.youtube.com/@SimplilearnOfficial" target="_blank" rel="noopener">Simplilearn&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://youtu.be/UO98lJQ3QGI" target="_blank" rel="noopener">&lt;em>&amp;ldquo;Matplotlib Tutorial (Part 1): Creating and Customizing Our First Plots&amp;rdquo;&lt;/em>&lt;/a> by &lt;a href="https://www.youtube.com/@coreyms" target="_blank" rel="noopener">Corey Schafer&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://youtu.be/wB9C0Mz9gSo" target="_blank" rel="noopener">&lt;em>&amp;ldquo;Matplotlib Tutorial : Matplotlib Full Course&amp;rdquo;&lt;/em>&lt;/a> by &lt;a href="https://www.youtube.com/@derekbanas" target="_blank" rel="noopener">Derek Banas&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://youtu.be/xi0vhXFPegw" target="_blank" rel="noopener">&lt;em>&amp;ldquo;Exploratory Data Analysis with Pandas Python 2023&amp;rdquo;&lt;/em>&lt;/a> by &lt;a href="https://www.youtube.com/@robmulla" target="_blank" rel="noopener">Rob Mulla&lt;/a>&lt;/li>
&lt;/ul>
&lt;h4 id="-other">🌐 Other&lt;/h4>
&lt;ul>
&lt;li>&lt;a href="https://visit.figure-eight.com/rs/416-ZBE-142/images/CrowdFlower_DataScienceReport_2016.pdf" target="_blank" rel="noopener">CrowdFlower Data Science Report 2016&lt;/a>&lt;/li>
&lt;/ul></description></item><item><title>Introduction to NumPy</title><link>https://parsa-abbasi.github.io/slides/numpy/</link><pubDate>Tue, 05 Feb 2019 00:00:00 +0000</pubDate><guid>https://parsa-abbasi.github.io/slides/numpy/</guid><description>&lt;h2 id="introduction-to-numpy">Introduction to NumPy&lt;/h2>
&lt;p>&lt;a href="https://numpy.org/install/" target="_blank" rel="noopener">Installation&lt;/a> | &lt;a href="https://numpy.org/doc/stable/" target="_blank" rel="noopener">Documentation&lt;/a>&lt;/p>
&lt;div style="font-size:18px; margin-top:80px">
Last updated: March 26, 2023
&lt;/div>
&lt;hr>
&lt;h3 id="introduction">Introduction&lt;/h3>
&lt;p>NumPy, short for Numerical Python, is a fundamental library for data analysis and scientific computing in the &lt;code>Python&lt;/code> programming language.&lt;/p>
&lt;hr>
&lt;h3 id="advantages-1">Advantages (1)&lt;/h3>
&lt;ul>
&lt;li>
&lt;p>&lt;strong>Multidimensional Arrays:&lt;/strong> NumPy arrays can have any number of dimensions, which makes it possible to store and manipulate complex data sets.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>High Performance:&lt;/strong> NumPy core is based on a highly optimized &lt;code>C&lt;/code> implementation, which means that it can perform mathematical and numerical operations much faster than pure Python.&lt;/p>
&lt;/li>
&lt;/ul>
&lt;hr>
&lt;h3 id="advantages-2">Advantages (2)&lt;/h3>
&lt;ul>
&lt;li>
&lt;p>&lt;strong>Mathematical Functions:&lt;/strong> NumPy provides a wide variety of mathematical functions for operations, including statistics, linear algebra, and Fourier Transforms.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>Efficient and Fast Computation:&lt;/strong> NumPy allows for fast and accurate computation through powerful vectorized operations and optimized mathematical functions.&lt;/p>
&lt;/li>
&lt;/ul>
&lt;hr>
&lt;h3 id="n-dimensional-array">N-dimensional array&lt;/h3>
&lt;p>One of the key features of NumPy is its N-dimensional array object, or &lt;code>ndarray&lt;/code>, which is a fast, flexible container for large datasets in Python.&lt;/p>
&lt;p>&lt;strong>Note:&lt;/strong> An &amp;rsquo;ndarray&amp;rsquo; is a multidimensional, &lt;u>homogeneous&lt;/u> array which means that all the elements in the array are of the same type.&lt;/p>
&lt;hr>
&lt;h3 id="creating-a-numpy-array-1">Creating a NumPy array (1)&lt;/h3>
&lt;p>The easiest way to create an &lt;code>ndarray&lt;/code> is to use the &lt;code>array()&lt;/code> function and pass any sequence-like object (e.g. a list, tuple, or another array) to it.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="line">&lt;span class="cl">&lt;span class="kn">import&lt;/span> &lt;span class="nn">numpy&lt;/span> &lt;span class="k">as&lt;/span> &lt;span class="nn">np&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">data&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mf">2.5&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mf">3.1&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">4&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mf">5.6&lt;/span>&lt;span class="p">]&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">arr&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">np&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">array&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">data&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">array([1. , 2.5, 3.1, 4. , 5.6])
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;hr>
&lt;h3 id="creating-a-numpy-array-2">Creating a NumPy array (2)&lt;/h3>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="line">&lt;span class="cl">&lt;span class="kn">import&lt;/span> &lt;span class="nn">numpy&lt;/span> &lt;span class="k">as&lt;/span> &lt;span class="nn">np&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">data&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">[[&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">2&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">3&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">4&lt;/span>&lt;span class="p">],&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="mi">5&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">6&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">7&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">8&lt;/span>&lt;span class="p">]]&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">arr&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">np&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">array&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">data&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">array([[1, 2, 3, 4],
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> [5, 6, 7, 8]])
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;hr>
&lt;h3 id="number-of-dimensions">Number of dimensions&lt;/h3>
&lt;p>We can check the number of dimensions of an array using the &lt;code>ndim&lt;/code> attribute.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">array([[1, 2, 3, 4],
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> [5, 6, 7, 8]])
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="line">&lt;span class="cl">&lt;span class="n">arr&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">ndim&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">2
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;hr>
&lt;h3 id="shape-of-an-array">Shape of an array&lt;/h3>
&lt;p>The &lt;code>shape&lt;/code> attribute returns a tuple of integers indicating the size of the array in each dimension.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">array([[1, 2, 3, 4],
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> [5, 6, 7, 8]])
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="line">&lt;span class="cl">&lt;span class="n">arr&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">shape&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">(2, 4)
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;hr>
&lt;h3 id="data-type-1">Data type (1)&lt;/h3>
&lt;p>The &lt;code>dtype&lt;/code> attribute is an object describing the type of the elements in the array. Unless specified, NumPy tries to infer a good data type for the array that it creates.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">array([[1, 2, 3, 4],
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> [5, 6, 7, 8]])
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="line">&lt;span class="cl">&lt;span class="n">arr&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">dtype&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">dtype(&amp;#39;int64&amp;#39;)
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;hr>
&lt;h3 id="data-type-2">Data type (2)&lt;/h3>
&lt;p>A full list of NumPy data types can be found &lt;a href="https://numpy.org/devdocs/user/basics.types.html" target="_blank" rel="noopener">here&lt;/a>.&lt;/p>
&lt;div style="font-size:20px">
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>Type&lt;/th>
&lt;th>Type code&lt;/th>
&lt;th>Description&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>&lt;code>bool&lt;/code>&lt;/td>
&lt;td>&lt;code>?&lt;/code>&lt;/td>
&lt;td>Boolean (True or False) stored as a byte&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>int8&lt;/code>&lt;/td>
&lt;td>&lt;code>i1&lt;/code>&lt;/td>
&lt;td>Byte (-128 to 127)&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>int16&lt;/code>&lt;/td>
&lt;td>&lt;code>i2&lt;/code>&lt;/td>
&lt;td>Integer (-32768 to 32767)&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>int32&lt;/code>&lt;/td>
&lt;td>&lt;code>i4&lt;/code>&lt;/td>
&lt;td>Integer (-2147483648 to 2147483647)&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>int64&lt;/code>&lt;/td>
&lt;td>&lt;code>i8&lt;/code>&lt;/td>
&lt;td>Integer (-9223372036854775808 to 9223372036854775807)&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>uint8&lt;/code>&lt;/td>
&lt;td>&lt;code>u1&lt;/code>&lt;/td>
&lt;td>Unsigned integer (0 to 255)&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>float16&lt;/code>&lt;/td>
&lt;td>&lt;code>f2&lt;/code>&lt;/td>
&lt;td>Half precision float: sign bit, 5 bits exponent, 10 bits mantissa&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>float32&lt;/code>&lt;/td>
&lt;td>&lt;code>f4&lt;/code>&lt;/td>
&lt;td>Single precision float: sign bit, 8 bits exponent, 23 bits mantissa&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>float64&lt;/code>&lt;/td>
&lt;td>&lt;code>f8&lt;/code>&lt;/td>
&lt;td>Double precision float: sign bit, 11 bits exponent, 52 bits mantissa&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>string_&lt;/code>&lt;/td>
&lt;td>&lt;code>S&lt;/code>&lt;/td>
&lt;td>Fixed-length ASCII string type (1 byte per character)&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>unicode_&lt;/code>&lt;/td>
&lt;td>&lt;code>U&lt;/code>&lt;/td>
&lt;td>Fixed-length Unicode type (number of bytes platform specific)&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>object&lt;/code>&lt;/td>
&lt;td>&lt;code>O&lt;/code>&lt;/td>
&lt;td>Python object type&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;/div>
&lt;hr>
&lt;h3 id="data-type-examples-1">Data type examples (1)&lt;/h3>
&lt;p>Boolean&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="line">&lt;span class="cl">&lt;span class="n">array&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">np&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">array&lt;/span>&lt;span class="p">([&lt;/span>&lt;span class="kc">True&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="kc">False&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="kc">True&lt;/span>&lt;span class="p">],&lt;/span> &lt;span class="n">dtype&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="nb">bool&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">array([ True, False, True])
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>String&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="line">&lt;span class="cl">&lt;span class="n">array&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">np&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">array&lt;/span>&lt;span class="p">([&lt;/span>&lt;span class="s1">&amp;#39;hello&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s1">&amp;#39;world&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s1">&amp;#39;numpy&amp;#39;&lt;/span>&lt;span class="p">],&lt;/span> &lt;span class="n">dtype&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="n">np&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">string_&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">array([b&amp;#39;hello&amp;#39;, b&amp;#39;world&amp;#39;, b&amp;#39;numpy&amp;#39;], dtype=&amp;#39;|S5&amp;#39;)
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;hr>
&lt;h3 id="data-type-examples-2">Data type examples (2)&lt;/h3>
&lt;p>Unicode&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="line">&lt;span class="cl">&lt;span class="n">array&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">np&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">array&lt;/span>&lt;span class="p">([&lt;/span>&lt;span class="sa">u&lt;/span>&lt;span class="s1">&amp;#39;سلام&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="sa">u&lt;/span>&lt;span class="s1">&amp;#39;بله&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="sa">u&lt;/span>&lt;span class="s1">&amp;#39;خیر&amp;#39;&lt;/span>&lt;span class="p">],&lt;/span> &lt;span class="n">dtype&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="n">np&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">unicode_&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">array([&amp;#39;سلام&amp;#39;, &amp;#39;بله&amp;#39;, &amp;#39;خیر&amp;#39;], dtype=&amp;#39;&amp;lt;U4&amp;#39;)
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Object&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="line">&lt;span class="cl">&lt;span class="n">array&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">np&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">array&lt;/span>&lt;span class="p">([{&lt;/span>&lt;span class="s2">&amp;#34;name&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s2">&amp;#34;John&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s2">&amp;#34;age&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="mi">25&lt;/span>&lt;span class="p">},&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">2&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">3&lt;/span>&lt;span class="p">],&lt;/span> &lt;span class="s2">&amp;#34;hello&amp;#34;&lt;/span>&lt;span class="p">],&lt;/span> &lt;span class="n">dtype&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="nb">object&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">array([{&amp;#39;name&amp;#39;: &amp;#39;John&amp;#39;, &amp;#39;age&amp;#39;: 25}, list([1, 2, 3]), &amp;#39;hello&amp;#39;],
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> dtype=object)
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;hr>
&lt;h3 id="casting-data-type">Casting data type&lt;/h3>
&lt;p>You can explicitly cast an array from one dtype to another using ndarray&amp;rsquo;s &lt;code>astype&lt;/code> method.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="line">&lt;span class="cl">&lt;span class="n">array&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">np&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">array&lt;/span>&lt;span class="p">([&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">2&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">3&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">4&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">5&lt;/span>&lt;span class="p">])&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">array([1, 2, 3, 4, 5])
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="line">&lt;span class="cl">&lt;span class="n">array&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">astype&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">np&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">float64&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">array([1., 2., 3., 4., 5.])
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;div style="font-size:20px">
&lt;b style="color:orange">Note:&lt;/b> Calling &lt;code>astype&lt;/code> always creates a &lt;u>copy&lt;/u> of the data, even if the new dtype is the same as the old dtype.
&lt;/div>
&lt;hr>
&lt;h3 id="array-creation-functions-1">Array creation functions (1)&lt;/h3>
&lt;p>&lt;code>zeros&lt;/code> and &lt;code>ones&lt;/code> create arrays of &lt;code>0&lt;/code>&amp;rsquo;s or &lt;code>1&lt;/code>&amp;rsquo;s, respectively, with a given length or shape. &lt;code>empty&lt;/code> creates an array without initializing its values to any particular value.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="line">&lt;span class="cl">&lt;span class="n">np&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">zeros&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">10&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">array([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="line">&lt;span class="cl">&lt;span class="n">np&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">ones&lt;/span>&lt;span class="p">((&lt;/span>&lt;span class="mi">2&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">6&lt;/span>&lt;span class="p">))&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">array([[1., 1., 1., 1., 1., 1.],
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> [1., 1., 1., 1., 1., 1.]])
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="line">&lt;span class="cl">&lt;span class="n">np&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">empty&lt;/span>&lt;span class="p">((&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">2&lt;/span>&lt;span class="p">))&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">array([[1., 1.]])
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;hr>
&lt;h3 id="array-creation-functions-2">Array creation functions (2)&lt;/h3>
&lt;p>zeros_like and ones_like create arrays of 0&amp;rsquo;s or 1&amp;rsquo;s with the same shape and dtype as a given array.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="line">&lt;span class="cl">&lt;span class="n">array&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">np&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">array&lt;/span>&lt;span class="p">([[&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">2&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">3&lt;/span>&lt;span class="p">],&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="mi">4&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">5&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">6&lt;/span>&lt;span class="p">]])&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">array([[1, 2, 3],
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> [4, 5, 6]])
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="line">&lt;span class="cl">&lt;span class="n">np&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">zeros_like&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">array&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">array([[0, 0, 0],
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> [0, 0, 0]])
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="line">&lt;span class="cl">&lt;span class="n">np&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">ones_like&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">array&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">array([[1, 1, 1],
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> [1, 1, 1]])
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;hr>
&lt;h3 id="array-creation-functions-3">Array creation functions (3)&lt;/h3>
&lt;p>&lt;code>full&lt;/code> creates an array of a given length or shape and fills it with a given value.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="line">&lt;span class="cl">&lt;span class="n">np&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">full&lt;/span>&lt;span class="p">((&lt;/span>&lt;span class="mi">2&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">2&lt;/span>&lt;span class="p">),&lt;/span> &lt;span class="mi">5&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">array([[5, 5],
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> [5, 5]])
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="line">&lt;span class="cl">&lt;span class="n">np&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">full&lt;/span>&lt;span class="p">((&lt;/span>&lt;span class="mi">2&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">2&lt;/span>&lt;span class="p">),&lt;/span> &lt;span class="n">np&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">pi&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">array([[3.14159265, 3.14159265],
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> [3.14159265, 3.14159265]])
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;hr>
&lt;h3 id="array-creation-functions-4">Array creation functions (4)&lt;/h3>
&lt;p>&lt;code>arange&lt;/code> is an array-valued version of the built-in Python &lt;code>range&lt;/code> function. It returns an array instead of a list.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="line">&lt;span class="cl">&lt;span class="n">np&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">arange&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">10&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">array([0, 1, 2, 3, 4, 5, 6, 7, 8, 9])
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="line">&lt;span class="cl">&lt;span class="n">np&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">arange&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">10&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">2&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">array([1, 3, 5, 7, 9])
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;hr>
&lt;h3 id="array-creation-functions-5">Array creation functions (5)&lt;/h3>
&lt;p>&lt;code>linspace&lt;/code> creates an array of evenly spaced values within a given interval.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="line">&lt;span class="cl">&lt;span class="n">np&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">linspace&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">10&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">5&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">array([ 0., 2.5, 5., 7.5, 10.])
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="line">&lt;span class="cl">&lt;span class="n">np&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">linspace&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">10&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">5&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">endpoint&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="kc">False&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">array([0., 2., 4., 6., 8.])
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;hr>
&lt;h3 id="array-creation-functions-6">Array creation functions (6)&lt;/h3>
&lt;p>&lt;code>eye&lt;/code> and &lt;code>identity&lt;/code> create square &lt;code>N x N&lt;/code> identity matrices. &lt;code>1&lt;/code>&amp;rsquo;s on the diagonal and &lt;code>0&lt;/code>&amp;rsquo;s elsewhere.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="line">&lt;span class="cl">&lt;span class="n">np&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">eye&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">2&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">array([[1., 0.],
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> [0., 1.]])
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="line">&lt;span class="cl">&lt;span class="n">np&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">identity&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">3&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">array([[1., 0., 0.],
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> [0., 1., 0.],
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> [0., 0., 1.]])
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;div style="font-size:20px">
&lt;b style="color:orange">Note:&lt;/b> &lt;code>eye&lt;/code> is more flexible in creating identity matrices with diagonal shifted by any position (using &lt;code>k&lt;/code> parameter), while &lt;code>identity&lt;/code> is simpler and faster for creating square identity matrices with diagonal in center.
&lt;/div>
&lt;hr>
&lt;h3 id="arithmetic-operations-1">Arithmetic operations (1)&lt;/h3>
&lt;p>Vectorization is the ability of NumPy to perform mathematical computations and array operations on entire arrays without the need to write explicit loops.&lt;/p>
&lt;p>Any arithmetic operations between equal-size arrays applies the operation &lt;u>element-wise&lt;/u>.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="line">&lt;span class="cl">&lt;span class="n">array1&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">np&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">array&lt;/span>&lt;span class="p">([&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">2&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">3&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">4&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">5&lt;/span>&lt;span class="p">])&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">array2&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">np&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">array&lt;/span>&lt;span class="p">([&lt;/span>&lt;span class="mi">5&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">4&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">3&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">2&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">1&lt;/span>&lt;span class="p">])&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="line">&lt;span class="cl">&lt;span class="n">array1&lt;/span> &lt;span class="o">-&lt;/span> &lt;span class="n">array2&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">array([-4, -2, 0, 2, 4])
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="line">&lt;span class="cl">&lt;span class="n">array1&lt;/span> &lt;span class="o">*&lt;/span> &lt;span class="n">array2&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">array([5, 8, 9, 8, 5])
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;hr>
&lt;h3 id="arithmetic-operations-2">Arithmetic operations (2)&lt;/h3>
&lt;p>Arithmetic operations with scalars propagate the scalar argument to each element in the array.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="line">&lt;span class="cl">&lt;span class="n">array1&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">np&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">array&lt;/span>&lt;span class="p">([&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">2&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">3&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">4&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">5&lt;/span>&lt;span class="p">])&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="line">&lt;span class="cl">&lt;span class="mi">1&lt;/span> &lt;span class="o">/&lt;/span> &lt;span class="n">array1&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">array([1. , 0.5 , 0.33333333, 0.25 , 0.2 ])
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="line">&lt;span class="cl">&lt;span class="n">array1&lt;/span> &lt;span class="o">**&lt;/span> &lt;span class="mi">2&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">array([ 1, 4, 9, 16, 25])
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;hr>
&lt;h3 id="arithmetic-operations-3">Arithmetic operations (3)&lt;/h3>
&lt;p>Comparison operators between arrays are also vectorized.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="line">&lt;span class="cl">&lt;span class="n">array1&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">np&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">array&lt;/span>&lt;span class="p">([&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">2&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">3&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">4&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">5&lt;/span>&lt;span class="p">])&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">array2&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">np&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">array&lt;/span>&lt;span class="p">([&lt;/span>&lt;span class="mi">5&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">4&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">3&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">2&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">1&lt;/span>&lt;span class="p">])&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="line">&lt;span class="cl">&lt;span class="n">array1&lt;/span> &lt;span class="o">&amp;gt;&lt;/span> &lt;span class="n">array2&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">array([False, False, False, True, True])
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="line">&lt;span class="cl">&lt;span class="n">array1&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="n">array2&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">array([False, False, True, False, False])
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;hr>
&lt;h3 id="broadcasting-1">Broadcasting (1)&lt;/h3>
&lt;p>Arithmetic operations between differently sized arrays is called &lt;b>broadcasting&lt;/b>. Broadcasting allows arithmetic operations between arrays of different shapes.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="line">&lt;span class="cl">&lt;span class="n">array1&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">np&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">array&lt;/span>&lt;span class="p">([[&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">2&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">3&lt;/span>&lt;span class="p">],&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="mi">4&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">5&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">6&lt;/span>&lt;span class="p">]])&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">array2&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">np&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">array&lt;/span>&lt;span class="p">([&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">2&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">3&lt;/span>&lt;span class="p">])&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="line">&lt;span class="cl">&lt;span class="n">array1&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="n">array2&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">array([[2, 4, 6],
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> [5, 7, 9]])
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;hr>
&lt;h3 id="broadcasting-2">Broadcasting (2)&lt;/h3>
&lt;p>Broadcasting is a powerful mechanism that allows NumPy to work with arrays of different shapes when performing arithmetic operations. However, if the arrays do not have compatible shapes, a &lt;b>ValueError&lt;/b> will be raised.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="line">&lt;span class="cl">&lt;span class="n">array1&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">np&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">array&lt;/span>&lt;span class="p">([[&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">2&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">3&lt;/span>&lt;span class="p">],&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="mi">4&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">5&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">6&lt;/span>&lt;span class="p">]])&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">array2&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">np&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">array&lt;/span>&lt;span class="p">([&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">2&lt;/span>&lt;span class="p">])&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="line">&lt;span class="cl">&lt;span class="n">array1&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="n">array2&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">ValueError: operands could not be broadcast together with shapes (2,3) (2,)
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;hr></description></item></channel></rss>